"use strict";(self.webpackChunkprogramming_basics=self.webpackChunkprogramming_basics||[]).push([[762],{3905:(e,a,n)=>{n.d(a,{Zo:()=>m,kt:()=>h});var t=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=t.createContext({}),p=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},m=function(e){var a=p(e.components);return t.createElement(o.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=s,h=c["".concat(o,".").concat(d)]||c[d]||u[d]||r;return n?t.createElement(h,l(l({ref:a},m),{},{components:n})):t.createElement(h,l({ref:a},m))}));function h(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=n.length,l=new Array(r);l[0]=d;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i[c]="string"==typeof e?e:s,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,a,n)=>{n.d(a,{Z:()=>l});var t=n(7294),s=n(6010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:a,hidden:n,className:l}=e;return t.createElement("div",{role:"tabpanel",className:(0,s.Z)(r.tabItem,l),hidden:n},a)}},4866:(e,a,n)=>{n.d(a,{Z:()=>v});var t=n(7462),s=n(7294),r=n(6010),l=n(2466),i=n(6550),o=n(1980),p=n(7392),m=n(12);function c(e){return function(e){return s.Children.map(e,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:a,label:n,attributes:t,default:s}}=e;return{value:a,label:n,attributes:t,default:s}}))}function u(e){const{values:a,children:n}=e;return(0,s.useMemo)((()=>{const e=a??c(n);return function(e){const a=(0,p.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function d(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function h(e){let{queryString:a=!1,groupId:n}=e;const t=(0,i.k6)(),r=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,o._X)(r),(0,s.useCallback)((e=>{if(!r)return;const a=new URLSearchParams(t.location.search);a.set(r,e),t.replace({...t.location,search:a.toString()})}),[r,t])]}function g(e){const{defaultValue:a,queryString:n=!1,groupId:t}=e,r=u(e),[l,i]=(0,s.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!d({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:a,tabValues:r}))),[o,p]=h({queryString:n,groupId:t}),[c,g]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[t,r]=(0,m.Nk)(n);return[t,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:t}),N=(()=>{const e=o??c;return d({value:e,tabValues:r})?e:null})();(0,s.useLayoutEffect)((()=>{N&&i(N)}),[N]);return{selectedValue:l,selectValue:(0,s.useCallback)((e=>{if(!d({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),g(e)}),[p,g,r]),tabValues:r}}var N=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:a,block:n,selectedValue:i,selectValue:o,tabValues:p}=e;const m=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.o5)(),u=e=>{const a=e.currentTarget,n=m.indexOf(a),t=p[n].value;t!==i&&(c(a),o(t))},d=e=>{let a=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;a=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;a=m[n]??m[m.length-1];break}}a?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},a)},p.map((e=>{let{value:a,label:n,attributes:l}=e;return s.createElement("li",(0,t.Z)({role:"tab",tabIndex:i===a?0:-1,"aria-selected":i===a,key:a,ref:e=>m.push(e),onKeyDown:d,onClick:u},l,{className:(0,r.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":i===a})}),n??a)})))}function f(e){let{lazy:a,children:n,selectedValue:t}=e;if(n=Array.isArray(n)?n:[n],a){const e=n.find((e=>e.props.value===t));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},n.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==t}))))}function y(e){const a=g(e);return s.createElement("div",{className:(0,r.Z)("tabs-container",k.tabList)},s.createElement(b,(0,t.Z)({},e,a)),s.createElement(f,(0,t.Z)({},e,a)))}function v(e){const a=(0,N.Z)();return s.createElement(y,(0,t.Z)({key:String(a)},e))}},74:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var t=n(7462),s=(n(7294),n(3905)),r=n(4866),l=n(5162);const i={sidebar_position:4},o="Inheritance",p={unversionedId:"oop/inheritance",id:"oop/inheritance",title:"Inheritance",description:"Inheritance is a concept in object-oriented programming that allows creating",source:"@site/docs/oop/inheritance.mdx",sourceDirName:"oop",slug:"/oop/inheritance",permalink:"/programming-basics/docs/oop/inheritance",draft:!1,editUrl:"https://github.com/alexkmj/programming-basics/tree/master/docs/docs/oop/inheritance.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar",previous:{title:"Immutability",permalink:"/programming-basics/docs/oop/immutability"},next:{title:"Substitution",permalink:"/programming-basics/docs/oop/substitution"}},m={},c=[{value:"Factory Methods",id:"factory-methods",level:2},{value:"<code>toString()</code>",id:"tostring",level:2},{value:"<code>equals()</code>",id:"equals",level:2}],u={toc:c},d="wrapper";function h(e){let{components:a,...n}=e;return(0,s.kt)(d,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"inheritance"},"Inheritance"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Inheritance")," is a concept in object-oriented programming that allows creating\nnew classes from existing classes. Inheritance enables the creation of new\nclasses (derived or child classes) that inherit the properties and behavior of\nan existing class (base or parent class)."),(0,s.kt)("p",null,"The derived class can reuse and extend the functionality of the base class, and\ncan add additional properties and methods specific to itself. This can\nsignificantly reduce code duplication, increase code reuse, and make the code\nmore manageable and maintainable."),(0,s.kt)("p",null,"The parent class is also known as the super class, while the derived class is\nalso known as the sub class. The sub class is said to inherit the properties and\nbehaviors of the super class. The sub class can access the properties and\nmethods of the super class using the ",(0,s.kt)("inlineCode",{parentName:"p"},"super")," keyword in many OOP languages."),(0,s.kt)("p",null,"Inheritance is a powerful concept in OOP, and is widely used in many programming\nlanguages to build complex systems. It is an essential aspect of object-oriented\ndesign that enables modular, reusable, and maintainable code."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'// Base class\nclass Animal {\n    public void eat() {\n        System.out.println("Eating...");\n    }\n}\n\n// Derived class\nclass Dog extends Animal {\n    public void eat() {\n        super.eat();\n        System.out.println("Chewing loudly...");\n    }\n    \n    public void bark() {\n        System.out.println("Barking...");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog dog = new Dog();\n        dog.eat();\n        dog.bark();\n    }\n}\n'))),(0,s.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\nusing namespace std;\n\n// Base class\nclass Animal {\npublic:\n    void eat() {\n        cout << "Eating..." << endl;\n    }\n};\n\n// Derived class\nclass Dog : public Animal {\npublic:\n    void eat() {\n        Animal::eat();\n        cout << "Chewing loudly..." << endl;\n    }\n    \n    void bark() {\n        cout << "Barking..." << endl;\n    }\n};\n\n// Test code\nint main() {\n    Dog dog;\n    dog.eat();\n    dog.bark();\n    return 0;\n}\n'))),(0,s.kt)(l.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'# Base class\nclass Animal:\n    def eat(self):\n        print("Eating...")\n\n# Derived class\nclass Dog(Animal):\n    def eat(self):\n        super().eat()\n        print("Chewing loudly...")\n\n    def bark(self):\n        print("Barking...")\n\n# Test code\ndog = Dog()\ndog.eat()\ndog.bark()\n')))),(0,s.kt)("p",null,"In this example, ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal")," is the parent class or super class while ",(0,s.kt)("inlineCode",{parentName:"p"},"Dog")," is the\nchild class or sub class. The ",(0,s.kt)("inlineCode",{parentName:"p"},"eat()")," method in ",(0,s.kt)("inlineCode",{parentName:"p"},"Dog")," extends the ",(0,s.kt)("inlineCode",{parentName:"p"},"eat()")," in\n",(0,s.kt)("inlineCode",{parentName:"p"},"Animal"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"eat()")," of ",(0,s.kt)("inlineCode",{parentName:"p"},"Animal")," is called in ",(0,s.kt)("inlineCode",{parentName:"p"},"eat()")," of ",(0,s.kt)("inlineCode",{parentName:"p"},"Dog")," by calling the\n",(0,s.kt)("inlineCode",{parentName:"p"},"super.eat()"),"."),(0,s.kt)("h2",{id:"factory-methods"},"Factory Methods"),(0,s.kt)("p",null,"Factory methods is a design pattern in object-oriented programming that\nprovides an interface for creating objects in a superclass, but allow subclasses\nto alter the type of objects that will be created. A factory method typically\ndefines an abstract method in the superclass, which the subclasses then\nimplement to create the desired objects."),(0,s.kt)("p",null,"The key advantage of using factory methods is that they provide a level of\nabstraction between the client code and the creation of objects. This allows for\nmore flexibility in the creation process and makes the code more maintainable\nand reusable."),(0,s.kt)("p",null,"For example, consider an interface ",(0,s.kt)("inlineCode",{parentName:"p"},"Vehicle")," that has a factory method called\n",(0,s.kt)("inlineCode",{parentName:"p"},"start()"),". The ",(0,s.kt)("inlineCode",{parentName:"p"},"start()")," method is abstract and does not provide an\nimplementation. Subclasses of ",(0,s.kt)("inlineCode",{parentName:"p"},"Vehicle"),", such as ",(0,s.kt)("inlineCode",{parentName:"p"},"Car")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Truck"),", would\nthen implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"start()")," method to create instances of their\nrespective classes. The ",(0,s.kt)("inlineCode",{parentName:"p"},"VehicleFactory")," is then responsible for creating\ninstances of ",(0,s.kt)("inlineCode",{parentName:"p"},"Vehicle")," based on the given type."),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public interface Vehicle {\n    void start();\n}\n\npublic class Car implements Vehicle {\n    @Override\n    public void start() {\n        System.out.println("Starting Car...");\n    }\n}\n\npublic class Truck implements Vehicle {\n    @Override\n    public void start() {\n        System.out.println("Starting Truck...");\n    }\n}\n\npublic class VehicleFactory {\n    public static Vehicle createVehicle(String type) {\n        if (type.equalsIgnoreCase("car")) {\n            return new Car();\n        } else if (type.equalsIgnoreCase("truck")) {\n            return new Truck();\n        } else {\n            throw new IllegalArgumentException("Invalid vehicle type: " + type);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Vehicle car = VehicleFactory.createVehicle("car");\n        Vehicle truck = VehicleFactory.createVehicle("truck");\n        \n        car.start();\n        truck.start();\n    }\n}\n'))),(0,s.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n\nclass Vehicle {\npublic:\n    virtual void start() = 0;\n};\n\nclass Car : public Vehicle {\npublic:\n    void start() override {\n        std::cout << "Starting Car...\\n";\n    }\n};\n\nclass Truck : public Vehicle {\npublic:\n    void start() override {\n        std::cout << "Starting Truck...\\n";\n    }\n};\n\nclass VehicleFactory {\npublic:\n    static Vehicle* createVehicle(const std::string& type) {\n        if (type == "car") {\n            return new Car();\n        } else if (type == "truck") {\n            return new Truck();\n        } else {\n            throw std::invalid_argument("Invalid vehicle type: " + type);\n        }\n    }\n};\n\nint main() {\n    Vehicle* car = VehicleFactory::createVehicle("car");\n    Vehicle* truck = VehicleFactory::createVehicle("truck");\n    \n    car->start();\n    truck->start();\n    \n    delete car;\n    delete truck;\n    \n    return 0;\n}\n'))),(0,s.kt)(l.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def start(self):\n        pass\n\nclass Car(Vehicle):\n    def start(self):\n        print("Starting Car...")\n\nclass Truck(Vehicle):\n    def start(self):\n        print("Starting Truck...")\n\nclass VehicleFactory:\n    @staticmethod\n    def create_vehicle(vehicle_type):\n        if vehicle_type.lower() == "car":\n            return Car()\n        elif vehicle_type.lower() == "truck":\n            return Truck()\n        else:\n            raise ValueError("Invalid vehicle type: " + vehicle_type)\n\nif __name__ == "__main__":\n    car = VehicleFactory.create_vehicle("car")\n    truck = VehicleFactory.create_vehicle("truck")\n    \n    car.start()\n    truck.start()\n')))),(0,s.kt)("p",null,"In this example, the Vehicle superclass provides the interface for creating\ninstances of Car and Truck, but the actual creation of those instances is\ndelegated to the respective subclasses. The client code can then call the\n",(0,s.kt)("inlineCode",{parentName:"p"},"createVehicle()")," method on the appropriate subclass to create the desired\nobject."),(0,s.kt)("p",null,"Factory methods are useful in situations where the creation of objects is\ncomplex, and the client code does not need to know the details of how the\nobjects are created. By providing an abstract interface for creating objects,\nfactory methods allow for greater flexibility and maintainability in the code."),(0,s.kt)("h2",{id:"tostring"},(0,s.kt)("inlineCode",{parentName:"h2"},"toString()")),(0,s.kt)("p",null,"In Java, ",(0,s.kt)("inlineCode",{parentName:"p"},"toString()")," is a method defined in the Object class that is inherited\nby all classes in Java. It returns a string representation of an object. The\ndefault implementation of ",(0,s.kt)("inlineCode",{parentName:"p"},"toString()")," returns a string consisting of the class\nname, the at-sign, and the object's hash code in hexadecimal form."),(0,s.kt)("p",null,"Classes can override the default ",(0,s.kt)("inlineCode",{parentName:"p"},"toString()")," method to provide a more\nmeaningful string representation of an object. This can be useful for debugging\nand logging purposes."),(0,s.kt)("p",null,"For example, consider the following Person class:"),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public class Person {\n    private String firstName;\n    private String lastName;\n    private int age;\n\n    public Person(String firstName, String lastName, int age) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return String.format("Name: %s %s, Age: %d", firstName, lastName, age);\n    }\n}\n\npublic static void main(String[] args) {\n    Person person = new Person("John", "Doe", 30);\n    System.out.println(person.toString());\n}\n'))),(0,s.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Person {\nprivate:\n    string firstName;\n    string lastName;\n    int age;\npublic:\n    Person(string firstName, string lastName, int age) {\n        this->firstName = firstName;\n        this->lastName = lastName;\n        this->age = age;\n    }\n\n    string toString() {\n        return "Name: " + firstName + " " + lastName + ", Age: " + to_string(age);\n    }\n};\n\nint main() {\n    Person person("John", "Doe", 30);\n    cout << person.toString() << endl;\n    return 0;\n}\n'))),(0,s.kt)(l.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n        \n    def __str__(self):\n        return f"Name: {self.first_name} {self.last_name}, Age: {self.age}"\n    \nperson = Person("John", "Doe", 30)\nprint(person)\n')))),(0,s.kt)("p",null,"In this example, the ",(0,s.kt)("inlineCode",{parentName:"p"},"toString()")," method is overridden to return a string\nrepresentation of a Person object that includes the person's name and age. This\ncan be useful for logging or printing the object to the console."),(0,s.kt)("p",null,"Note that we don't need to call ",(0,s.kt)("inlineCode",{parentName:"p"},"toString()")," explicitly in most cases, as it is\nautomatically called when an object is printed to the console or concatenated\nwith a string."),(0,s.kt)("h2",{id:"equals"},(0,s.kt)("inlineCode",{parentName:"h2"},"equals()")),(0,s.kt)("p",null,"In object-oriented programming, ",(0,s.kt)("inlineCode",{parentName:"p"},"equals()")," is a method that is commonly used\nto compare two objects for equality. The equals method is used to check if two\nobjects have the same values for their attributes."),(0,s.kt)("p",null,"In Java, the equals method is a part of the Object class and can be overridden\nin a subclass to define custom equality logic for the subclass. The equals\nmethod takes an Object as a parameter and returns a boolean value. By default,\nthe equals method in the Object class checks if the two objects are the same\ninstance."),(0,s.kt)("p",null,"It is recommended to override the equals method when a custom class is created.\nWhen overriding the equals method, the programmer should consider the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Symmetry")),(0,s.kt)("p",{parentName:"li"},"If ",(0,s.kt)("inlineCode",{parentName:"p"},"a.equals(b)")," is true, then ",(0,s.kt)("inlineCode",{parentName:"p"},"b.equals(a)")," should also be true."),(0,s.kt)("div",{parentName:"li",className:"math math-display"},(0,s.kt)("span",{parentName:"div",className:"katex-display"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mo",{parentName:"mrow"},"\u21d2"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"a")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a = b \\Rightarrow b = a")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u21d2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"))))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Reflexivity")),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"p"},"a.equals(a)")," should always be true."),(0,s.kt)("div",{parentName:"li",className:"math math-display"},(0,s.kt)("span",{parentName:"div",className:"katex-display"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"a")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a = a")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"))))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Transitivity")),(0,s.kt)("p",{parentName:"li"},"If ",(0,s.kt)("inlineCode",{parentName:"p"},"a.equals(b)")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"b.equals(c)")," are true, then ",(0,s.kt)("inlineCode",{parentName:"p"},"a.equals(c)")," should also be\ntrue."),(0,s.kt)("div",{parentName:"li",className:"math math-display"},(0,s.kt)("span",{parentName:"div",className:"katex-display"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mo",{parentName:"mrow"},"\u2227"),(0,s.kt)("mi",{parentName:"mrow"},"b"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"c"),(0,s.kt)("mo",{parentName:"mrow"},"\u21d2"),(0,s.kt)("mi",{parentName:"mrow"},"a"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"c")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"a = b \\land b = c \\Rightarrow a = c")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2227"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"b"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"\u21d2"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"a"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"c"))))))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Consistency")),(0,s.kt)("p",{parentName:"li"},"The equals method should always return the same result for the same objects.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Null check")),(0,s.kt)("p",{parentName:"li"},"The equals method should return ",(0,s.kt)("inlineCode",{parentName:"p"},"false")," if the object being compared is\n",(0,s.kt)("inlineCode",{parentName:"p"},"null"),"."))),(0,s.kt)(r.Z,{mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n\n        if (!(obj instanceof Person)) {\n            return false;\n        }\n\n        Person person = (Person) obj;\n        return this.name.equals(person.name) && this.age == person.age;\n    }\n}\n"))),(0,s.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Person {\n#include <iostream>\nusing namespace std;\n\nclass Person {\nprivate:\n    string firstName;\n    string lastName;\n    int age;\npublic:\n    Person(string firstName, string lastName, int age) {\n        this->firstName = firstName;\n        this->lastName = lastName;\n        this->age = age;\n    }\n    bool operator==(const Person &other) const {\n        return (firstName == other.firstName &&\n                lastName == other.lastName &&\n                age == other.age);\n    }\n};\n\nint main() {\n    Person person1("John", "Doe", 30);\n    Person person2("John", "Doe", 30);\n    Person person3("Jane", "Doe", 25);\n\n    cout << boolalpha;\n    cout << (person1 == person2) << endl; // prints true\n    cout << (person1 == person3) << endl; // prints false\n\n    return 0;\n}\n'))),(0,s.kt)(l.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'class Person:\n    def __init__(self, first_name, last_name, age):\n        self.first_name = first_name\n        self.last_name = last_name\n        self.age = age\n\n    def __eq__(self, other):\n        if isinstance(other, Person):\n            return self.first_name == other.first_name and self.last_name == other.last_name and self.age == other.age\n        return False\n\nperson1 = Person("John", "Doe", 30)\nperson2 = Person("Jane", "Doe", 25)\nperson3 = Person("John", "Doe", 30)\n\nprint(person1 == person2)  # False\nprint(person1 == person3)  # True\n')))),(0,s.kt)("p",null,"In this example, the equals method checks if the object being compared is of the\n",(0,s.kt)("inlineCode",{parentName:"p"},"Person")," class and has the same values for the ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"age")," attributes."))}h.isMDXComponent=!0}}]);