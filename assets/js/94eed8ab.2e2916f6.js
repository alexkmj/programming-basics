"use strict";(self.webpackChunkprogramming_basics=self.webpackChunkprogramming_basics||[]).push([[345],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,m=p["".concat(c,".").concat(h)]||p[h]||d[h]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(7462),a=n(7294),o=n(6010),i=n(2466),l=n(6550),c=n(1980),s=n(7392),u=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function d(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=d(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[c,s]=m({queryString:n,groupId:r}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,u.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),b=(()=>{const e=c??p;return h({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),s(e),f(e)}),[s,f,o]),tabValues:o}}var b=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:c,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),r=s[n].value;r!==l&&(p(t),c(r))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:h,onClick:d},i,{className:(0,o.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function x(e){const t=f(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",g.tabList)},a.createElement(y,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return a.createElement(x,(0,r.Z)({key:String(t)},e))}},5918:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),o=n(4866),i=n(5162);const l={sidebar_position:9},c="Exception Handling",s={unversionedId:"oop/exception-handling",id:"oop/exception-handling",title:"Exception Handling",description:"Exception handling is a mechanism in object-oriented programming that allows a",source:"@site/docs/oop/exception-handling.mdx",sourceDirName:"oop",slug:"/oop/exception-handling",permalink:"/programming-basics/docs/oop/exception-handling",draft:!1,editUrl:"https://github.com/alexkmj/programming-basics/tree/master/docs/docs/oop/exception-handling.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"sidebar",previous:{title:"No More Null",permalink:"/programming-basics/docs/oop/no-more-null"},next:{title:"Assertions",permalink:"/programming-basics/docs/oop/assertions"}},u={},p=[{value:"Types of Exception",id:"types-of-exception",level:2},{value:"Checked Exceptions",id:"checked-exceptions",level:3},{value:"Unchecked Exceptions",id:"unchecked-exceptions",level:3},{value:"Error",id:"error",level:3},{value:"Throwing Exceptions",id:"throwing-exceptions",level:2}],d={toc:p},h="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"exception-handling"},"Exception Handling"),(0,a.kt)("p",null,"Exception handling is a mechanism in object-oriented programming that allows a\nprogram to handle runtime errors and unexpected events that can occur during the\nexecution of a program. Exceptions are objects that represent errors, and they\ncan be thrown by code that detects an error condition. When an exception is\nthrown, it is caught by a handler that can take appropriate actions, such as\n",(0,a.kt)("strong",{parentName:"p"},"logging an error message, displaying a warning to the user, or attempting to\nrecover from the error"),"."),(0,a.kt)("p",null,"Exceptions are generally handled through a ",(0,a.kt)("inlineCode",{parentName:"p"},"try"),"-",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," block. The code that\nmay throw an exception is enclosed within a try block, and any exceptions that\nare thrown are caught by one or more catch blocks. Each catch block specifies\nthe type of exception it can handle, and the code within the block is executed\nif an exception of that type is thrown."),(0,a.kt)("p",null,"For example, consider the following Java code that reads a number from the user\nand attempts to convert it to an integer:"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Example {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print("Enter a number: ");\n        try {\n            int number = scanner.nextInt();\n            System.out.println("The number is: " + number);\n        } catch (InputMismatchException e) {\n            System.err.println("Invalid input");\n        }\n    }\n}\n'))),(0,a.kt)(i.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <stdexcept>\n\nint main() {\n    std::cout << "Enter a number: ";\n    try {\n        int number;\n        std::cin >> number;\n        if (std::cin.fail()) {\n            throw std::invalid_argument("Invalid input");\n        }\n        std::cout << "The number is: " << number << std::endl;\n    } catch (const std::invalid_argument& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}\n'))),(0,a.kt)(i.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import sys\n\ntry:\n    input_str = input("Enter a number: ")\n    number = int(input_str)\n    print("The number is:", number)\nexcept ValueError:\n    print("Invalid input")\n')))),(0,a.kt)("p",null,"In this example, we try to catch the error when the input is not an integer."),(0,a.kt)("h2",{id:"types-of-exception"},"Types of Exception"),(0,a.kt)("h3",{id:"checked-exceptions"},"Checked Exceptions"),(0,a.kt)("h3",{id:"unchecked-exceptions"},"Unchecked Exceptions"),(0,a.kt)("h3",{id:"error"},"Error"),(0,a.kt)("h2",{id:"throwing-exceptions"},"Throwing Exceptions"),(0,a.kt)("p",null,"Throwing an exception is a way of signaling that an error or exceptional\ncondition has occurred during the execution of a program. This can help improve\nthe reliability of the program by allowing the program to gracefully handle\nerrors and prevent them from causing the program to crash or produce incorrect\nresults."),(0,a.kt)("p",null,"To throw an exception, you first need to create an instance of the\nexception class that corresponds to the type of error you want to throw. For\nexample, to signal that a file could not be found, you would create an instance\nof the ",(0,a.kt)("inlineCode",{parentName:"p"},"FileNotFoundException")," class. You can then throw this exception using\nthe throw keyword followed by the exception object. Here's an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public void readFile(String filename) throws FileNotFoundException {\n    File file = new File(filename);\n    if (!file.exists()) {\n        throw new FileNotFoundException("File not found: " + filename);\n    }\n    // code to read file...\n}\n')),(0,a.kt)("p",null,"In this example, if the file does not exist, an instance of\n",(0,a.kt)("inlineCode",{parentName:"p"},"FileNotFoundException")," is created with a message indicating the name of the\nfile that could not be found. This exception is then thrown using the throw\nkeyword. The throws keyword in the method signature indicates that the method\nmay throw this exception and that calling code must handle it accordingly."),(0,a.kt)("p",null,"When an exception is thrown, it interrupts the normal flow of execution and is\npassed up the call stack until it is caught by an appropriate catch block or\nuntil it reaches the top level of the program, at which point it will terminate\nthe program."))}m.isMDXComponent=!0}}]);