"use strict";(self.webpackChunkprogramming_basics=self.webpackChunkprogramming_basics||[]).push([[340],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const i={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7462),r=n(7294),i=n(6010),l=n(2466),o=n(6550),s=n(1980),c=n(7392),u=n(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=p(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,c]=g({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),f=(()=>{const e=s??d;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&o(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),b(e)}),[c,b,i]),tabValues:i}}var f=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==o&&(d(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},l,{className:(0,i.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=b(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},r.createElement(h,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},9035:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),l=n(5162);const o={sidebar_position:2},s="Encapsulation",c={unversionedId:"encapsulation",id:"encapsulation",title:"Encapsulation",description:"Encapsulation is a fundamental concept of object-oriented programming. There",source:"@site/docs/encapsulation.mdx",sourceDirName:".",slug:"/encapsulation",permalink:"/programming-basics/docs/encapsulation",draft:!1,editUrl:"https://github.com/alexkmj/programming-basics/tree/master/docs/docs/encapsulation.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Abstraction",permalink:"/programming-basics/docs/abstraction"},next:{title:"Immutability",permalink:"/programming-basics/docs/immutability"}},u={},d=[{value:"Packaging",id:"packaging",level:2},{value:"Information Hiding",id:"information-hiding",level:2},{value:"Example",id:"example",level:2},{value:"Packaging",id:"packaging-1",level:3},{value:"Information Hiding",id:"information-hiding-1",level:3},{value:"Abstraction vs Encapsulation",id:"abstraction-vs-encapsulation",level:2}],p={toc:d},m="wrapper";function g(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"encapsulation"},"Encapsulation"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Encapsulation")," is a fundamental concept of object-oriented programming. There\nare two aspects of encapsulation - ",(0,r.kt)("strong",{parentName:"p"},"packaging and information hiding"),"."),(0,r.kt)("h2",{id:"packaging"},"Packaging"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Packaging")," refers to the practice of bundling data and behavior (procedures)\nwithin a single unit (class)."),(0,r.kt)("h2",{id:"information-hiding"},"Information Hiding"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Information Hiding")," refers to the practice of restricting access to the\ninternal data of an object from the outside. This can be done through access\nmodifiers like ",(0,r.kt)("inlineCode",{parentName:"p"},"private"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"protected"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"public"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:"center"},"Class"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Package"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Subclass (same package)"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Subclass (different package)"),(0,r.kt)("th",{parentName:"tr",align:"center"},"World"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"public"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"protected"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"no modifier"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"private"),(0,r.kt)("td",{parentName:"tr",align:"center"},"\u2713"),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"})))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class Car {\n    private String make;\n    private String model;\n    private int year;\n    \n    public Car(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n    \n    public String getMake() {\n        return make;\n    }\n    \n    public String getModel() {\n        return model;\n    }\n    \n    public int getYear() {\n        return year;\n    }\n}\n"))),(0,r.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Car {\n    private:\n        string make;\n        string model;\n        int year;\n    \n    public:\n        Car(string make, string model, int year) {\n            this->make = make;\n            this->model = model;\n            this->year = year;\n        }\n        \n        string getMake() {\n            return make;\n        }\n        \n        string getModel() {\n            return model;\n        }\n        \n        int getYear() {\n            return year;\n        }\n};\n"))),(0,r.kt)(l.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Car:\n    def __init__(self, make, model, year):\n        self.__make = make\n        self.__model = model\n        self.__year = year\n    \n    def get_make(self):\n        return self.__make\n    \n    def get_model(self):\n        return self.__model\n    \n    def get_year(self):\n        return self.__year\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Any identifier of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"__spam")," (at least two leading underscores, at most\none trailing underscore) is textually replaced with ",(0,r.kt)("inlineCode",{parentName:"p"},"_classname__spam"),", where\nclassname is the current class name with leading underscore(s) stripped. This\nmangling is done without regard to the syntactic position of the identifier, so\nit can be used to define class-private instance and class variables, methods,\nvariables stored in globals, and even variables stored in instances. private to\nthis class on instances of other classes.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},'Name mangling is intended to give classes an easy way to define "private"\ninstance variables and methods, without having to worry about instance variables\ndefined by derived classes, or mucking with instance variables by code outside\nthe class. Note that the mangling rules are designed mostly to avoid accidents;\nit still is possible for a determined soul to access or modify a variable that\nis considered private.')))),(0,r.kt)("h3",{id:"packaging-1"},"Packaging"),(0,r.kt)("p",null,"In this ",(0,r.kt)("inlineCode",{parentName:"p"},"Car")," example, the behaviors ",(0,r.kt)("inlineCode",{parentName:"p"},"getMake()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"getModel()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"getYear()"),"\nand the data ",(0,r.kt)("inlineCode",{parentName:"p"},"make"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"year")," is ",(0,r.kt)("strong",{parentName:"p"},"packaged")," as a class. "),(0,r.kt)("h3",{id:"information-hiding-1"},"Information Hiding"),(0,r.kt)("p",null,"Additionally, ",(0,r.kt)("inlineCode",{parentName:"p"},"make"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"model"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"year")," properties are declared as private,\nand access to them is provided through public getter methods."),(0,r.kt)("h2",{id:"abstraction-vs-encapsulation"},"Abstraction vs Encapsulation"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:"center"},"Abstraction"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Encapsulation"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Purpose"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Show essential features and hiding the complexity"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Hide the internal workings and data from the outside world")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Implementation"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Using abstract class and interface"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Package the data and code into a single unit using class and protect data using access modifiers")))),(0,r.kt)("h1",{id:"tell-dont-ask"},"Tell, Don't Ask"),(0,r.kt)("p",null,"Instead of asking an object about its state and then making decisions based on\nthat state, the object should be told what to do. In other words, it's better\nto send a message to an object and let it decide what to do with that message,\nrather than asking for that object's state and then making decisions based on\nthat state."),(0,r.kt)("p",null,"This principle helps promote encapsulation because it encourages objects to\nmanage their own state and behavior. By sending messages to objects and allowing\nthem to handle those messages internally, other objects don't need to know about\nthe internal workings of an object's state or behavior. Instead, they only need\nto know how to interact with the object through its public interface."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",label:"Java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Tell, don't ask example\npublic class ShoppingCart {\n    private List<Item> items;\n\n    public double calculateTotal() {\n        double total = 0.0;\n        for (Item item : items) {\n            total += item.calculatePrice();\n        }\n        return total;\n    }\n\n    public List<Item> getItems() {\n        return items;\n    }\n}\n\npublic class Item {\n    private String name;\n    private double price;\n    private double discount;\n\n    private double getUsualPrice() {\n        return price;\n    }\n\n    private double getDiscount() {\n        return discount;\n    }\n\n    public double calculatePrice() {\n        return getUsualPrice() - getDiscount();\n    }\n}\n\n\n// Ask, don't tell example\npublic class ShoppingCart {\n    private List<Item> items;\n\n    public double calculateTotal() {\n        double total = 0.0;\n        for (Item item : items) {\n            total += item.getPrice()\n            total -= item.getDiscount();\n        }\n        return total;\n    }\n\n    public List<Item> getItems() {\n        return items;\n    }\n}\n\npublic class Item {\n    private String name;\n    private double price;\n    private double discount;\n\n    public double getUsualPrice() {\n        return price;\n    }\n\n    public double getDiscount() {\n        return discount;\n    }\n}\n"))),(0,r.kt)(l.Z,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Tell, don't ask example\nclass Item {\nprivate:\n    string name;\n    double price;\n    double discount;\npublic:\n    Item(string n, double p, double d) {\n        name = n;\n        price = p;\n        discount = d;\n    }\n    double calculatePrice() {\n        return price - discount;\n    }\n};\n\nclass ShoppingCart {\nprivate:\n    vector<Item> items;\npublic:\n    double calculateTotal() {\n        double total = 0.0;\n        for (int i = 0; i < items.size(); i++) {\n            total += items[i].calculatePrice();\n        }\n        return total;\n    }\n    vector<Item> getItems() {\n        return items;\n    }\n    void addItem(Item item) {\n        items.push_back(item);\n    }\n};\n\n// Ask, don't tell example\nclass Item {\nprivate:\n    string name;\n    double price;\n    double discount;\npublic:\n    Item(string n, double p, double d) {\n        name = n;\n        price = p;\n        discount = d;\n    }\n    double getPrice() {\n        return price;\n    }\n    double getDiscount() {\n        return discount;\n    }\n};\n\nclass ShoppingCart {\nprivate:\n    vector<Item> items;\npublic:\n    double calculateTotal() {\n        double total = 0.0;\n        for (int i = 0; i < items.size(); i++) {\n            total += items[i].getPrice() - items[i].getDiscount();\n        }\n        return total;\n    }\n    vector<Item> getItems() {\n        return items;\n    }\n    void addItem(Item item) {\n        items.push_back(item);\n    }\n};\n"))),(0,r.kt)(l.Z,{value:"python",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Tell, don't ask example\nclass Item:\n    def __init__(self, name, price, discount):\n        self.name = name\n        self.price = price\n        self.discount = discount\n\n    def calculate_price(self):\n        return self.price - self.discount\n\n\nclass ShoppingCart:\n    def __init__(self):\n        self.items = []\n\n    def calculate_total(self):\n        total = 0.0\n        for item in self.items:\n            total += item.calculate_price()\n        return total\n\n    def get_items(self):\n        return self.items\n\n    def add_item(self, item):\n        self.items.append(item)\n\n# Ask, don't tell example\nclass ShoppingCart:\n    def __init__(self):\n        self.items = []\n\n    def calculate_total(self):\n        total = 0.0\n        for item in self.items:\n            total += item.get_price()\n            total -= item.get_discount()\n        return total\n\n    def get_items(self):\n        return self.items\n\n\nclass Item:\n    def __init__(self, name, price, discount):\n        self.name = name\n        self.price = price\n        self.discount = discount\n\n    def get_price(self):\n        return self.price\n\n    def get_discount(self):\n        return self.discount\n")))))}g.isMDXComponent=!0}}]);